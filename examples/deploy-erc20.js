const { ethers } = require('ethers');
require('dotenv').config();

async function deployERC20() {
    try {
        const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');
        const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
        
        console.log('Deploying from address:', wallet.address);
        
        // Check account balance
        const balance = await provider.getBalance(wallet.address);
        console.log('Account balance:', ethers.formatEther(balance), 'ETH');
        
        // Get the current nonce to ensure proper transaction ordering
        const nonce = await provider.getTransactionCount(wallet.address, 'latest');
        console.log('Current nonce:', nonce);

        // ERC-20 contract details
        const tokenName = 'MyToken';
        const tokenSymbol = 'MTK';
        const decimals = 18;
        const totalSupply = 1000000; // 1 million tokens

        console.log('\nToken Parameters:');
        console.log('Name:', tokenName);
        console.log('Symbol:', tokenSymbol);
        console.log('Decimals:', decimals);
        console.log('Total Supply:', totalSupply);

        // ERC-20 contract bytecode (simplified version)
        const contractBytecode = '0x608060405234801561001057600080fd5b5060405161085038038061085083398101604081905261002f91610186565b8351610042906000906020870190610094565b508251610056906001906020860190610094565b506002805460ff191660ff841617905581516100799060ff84160a61023f565b60038190553360009081526004602052604090205550505050610261565b8280546100a09061022a565b90600052602060002090601f0160209004810192826100c25760008555610108565b82601f106100db57805160ff1916838001178555610108565b82800160010185558215610108579182015b828111156101085782518255916020019190600101906100ed565b50610114929150610118565b5090565b5b808211156101145760008155600101610119565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261015457600080fd5b81516001600160401b038082111561016e5761016e61012d565b604051601f8301601f19908116603f011681019082821181831017156101965761019661012d565b816040528381526020925086838588010111156101b257600080fd5b600091505b838210156101d457858201830151818301840152908201906101b7565b838211156101e55760008385830101525b9695505050505050565b600080600080608085870312156102055761020557600080fd5b84516001600160401b038082111561021c57600080fd5b61022888838901610143565b9550602087015191508082111561023e57600080fd5b5061024b87828801610143565b935050604085015160ff8116811461026257600080fd5b6060959095015193969295505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561029957610299610279565b500290565b60006102b96102b48381610295565b61028f565b90508181106102ca576102ca610279565b919050565b6105e0806102de6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461014157806370a082311461015457806395d89b411461017d578063a457c2d714610185578063a9059cbb14610198578063dd62ed3e146101ab57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101e4565b6040516100c391906104c5565b60405180910390f35b6100df6100da366004610536565b610272565b60405190151581526020016100c3565b6003545b6040519081526020016100c3565b6100df61010f366004610560565b610289565b60025461012190600160a01b900460ff1681565b60405160ff90911681526020016100c3565b6100df61014f366004610536565b61030f565b6100f361016236600461059c565b6001600160a01b031660009081526020819052604090205490565b6100b661034b565b6100df610193366004610536565b61035a565b6100df6101a6366004610536565b6103f3565b6100f36101b93660046105be565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600280546101f1906105f1565b80601f016020809104026020016040519081016040528092919081815260200182805461021d906105f1565b801561026a5780601f1061023f5761010080835404028352916020019161026a565b820191906000526020600020905b81548152906001019060200180831161024d57829003601f168201915b505050505081565b600061027f338484610400565b5060015b92915050565b6000610296848484610524565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156102f75760405162461bcd60e51b815260206004820152600560248201526422a92927a960d91b60448201526064015b60405180910390fd5b6103048533858403610400565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161027f918590610346908690610642565b610400565b600380546101f1906105f1565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103dc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102ee565b6103e93385858403610400565b5060019392505050565b600061027f338484610524565b6001600160a01b0383166104625760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102ee565b6001600160a01b0382166104c35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102ee565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600060208083528351808285015260005b818110156104f2578581018301518582016040015282016104d6565b81811115610504576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461053157600080fd5b919050565b6000806040838503121561054957600080fd5b6105528361051a565b946020939093013593505050565b60008060006060848603121561057557600080fd5b61057e8461051a565b925061058c6020850161051a565b9150604084013590509250925092565b6000602082840312156105ae57600080fd5b6105b78261051a565b9392505050565b600080604083850312156105d157600080fd5b6105da8361051a565b91506105e86020840161051a565b90509250929050565b600181811c9082168061060557607f821691505b6020821081141561062657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156106555761065561062c565b500190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220c5c1c8c4f8a4a4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c4c464736f6c634300080a0033';
        
        // Constructor parameters (name, symbol, decimals, totalSupply)
        const abiCoder = new ethers.AbiCoder();
        const constructorParams = abiCoder.encode(
            ['string', 'string', 'uint8', 'uint256'],
            [tokenName, tokenSymbol, decimals, ethers.parseUnits(totalSupply.toString(), 0)]
        );
        
        console.log('\nDeploying contract...');
        
        const deployTx = {
            nonce: nonce, // Use the current nonce
            data: contractBytecode + constructorParams.slice(2), // Remove '0x' prefix from constructor params
            gasLimit: 3000000,
            gasPrice: ethers.parseUnits('20', 'gwei'),
        };
        
        const txResponse = await wallet.sendTransaction(deployTx);
        console.log('‚úÖ Transaction sent:', txResponse.hash);
        
        // Get the transaction receipt to get the contract address
        console.log('‚è≥ Waiting for transaction confirmation...');
        const receipt = await txResponse.wait();
        
        if (receipt && receipt.contractAddress) {
            console.log('‚úÖ Contract deployed successfully!');
            console.log('üìú Contract address:', receipt.contractAddress);
            console.log('‚õΩ Gas used:', receipt.gasUsed?.toString());
            
            // Test contract by checking the balance
            console.log('\nüîç Testing deployed contract...');
            const contractInterface = new ethers.Interface([
                'function balanceOf(address owner) view returns (uint256)',
                'function totalSupply() view returns (uint256)',
                'function name() view returns (string)',
                'function symbol() view returns (string)'
            ]);
            
            // Get the total supply
            const totalSupplyCall = await provider.call({
                to: receipt.contractAddress,
                data: contractInterface.encodeFunctionData('totalSupply')
            });
            const decodedTotalSupply = contractInterface.decodeFunctionResult('totalSupply', totalSupplyCall);
            console.log('Total supply:', ethers.formatUnits(decodedTotalSupply[0], decimals));
            
            // Get the deployer's balance
            const balanceCall = await provider.call({
                to: receipt.contractAddress,
                data: contractInterface.encodeFunctionData('balanceOf', [wallet.address])
            });
            const decodedBalance = contractInterface.decodeFunctionResult('balanceOf', balanceCall);
            console.log('Deployer balance:', ethers.formatUnits(decodedBalance[0], decimals), tokenSymbol);
            
        } else {
            console.log('‚ùå Contract deployment failed - no contract address in receipt');
        }
        
    } catch (error) {
        console.error('‚ùå Deployment failed:', error.message);
        if (error.error) {
            console.error('Error details:', error.error);
        }
    }
}

deployERC20();